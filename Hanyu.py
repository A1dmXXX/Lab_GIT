import random
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
SHEET_URL = "https://docs.google.com/spreadsheets/d/1bXAB_S6Nyb8tVwkSGjYAJ_Ly6l6Pl7ysNDSprFHiFTg/edit?usp=sharing"
TOKEN = '7483388745:AAFFmpu-dbRLCOfnzqWCwXEEwOa2DG0k76o'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "integral-linker-431012-t7-1e523a49ec9e.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SHEET_URL).worksheet("–°–ª–æ–≤–∞—Ä—å")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
hieroglyphs = sheet.col_values(2)[3:5000]
pinyin = sheet.col_values(4)[3:5000]
translations = sheet.col_values(5)[3:5000]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π", callback_data='to_russian')],
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã", callback_data='to_hieroglyph')],
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –Ω–∞ –ø–∏–Ω—å–∏–Ω", callback_data='to_pinyin')],
        [InlineKeyboardButton("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–º–µ—Å—Ç–µ", callback_data='mixed')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['training_type'] = query.data
    await send_question(query.message, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤


async def send_question(message, context):
    training_type = context.user_data['training_type']

    if training_type == 'mixed':
        types = ['to_russian', 'to_hieroglyph', 'to_pinyin']
        selected_type = random.choice(types)
    else:
        selected_type = training_type

    if selected_type == 'to_russian':
        index = random.randint(0, len(hieroglyphs) - 1)
        question = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ '{hieroglyphs[index]}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π?"
        # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        answer = [a.strip().lower() for a in translations[index].split(',')]

    elif selected_type == 'to_hieroglyph':
        index = random.randint(0, len(translations) - 1)
        question = f"–ö–∞–∫–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—É '{translations[index]}'?"
        answer = [hieroglyphs[index].lower()]

    elif selected_type == 'to_pinyin':
        index = random.randint(0, len(hieroglyphs) - 1)
        question = f"–ö–∞–∫–æ–π –ø–∏–Ω—å–∏–Ω —É –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ '{hieroglyphs[index]}'?"
        answer = [pinyin[index].lower()]

    context.user_data['answer'] = answer
    await message.reply_text(f"{question}\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.strip().lower()  # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    correct_answers = context.user_data.get('answer')

    if user_answer in correct_answers:
        response = "–í–µ—Ä–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâ"
        await update.message.reply_text(response)
        await send_question(update.message, context)  # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    else:
        response = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        keyboard = [[InlineKeyboardButton(
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç", callback_data='show_answer')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞


async def show_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    correct_answer = ", ".join(context.user_data['answer'])
    await update.callback_query.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_question(update.callback_query.message, context)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π", callback_data='to_russian')],
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã", callback_data='to_hieroglyph')],
        [InlineKeyboardButton(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –Ω–∞ –ø–∏–Ω—å–∏–Ω", callback_data='to_pinyin')],
        [InlineKeyboardButton("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–º–µ—Å—Ç–µ", callback_data='mixed')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∏–∂–µ:", reply_markup=reply_markup)
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(
        button_handler, pattern='^(to_russian|to_hieroglyph|to_pinyin|mixed)$'))
    app.add_handler(CallbackQueryHandler(show_answer, pattern='^show_answer$'))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, answer_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()


#                        [main()]
#                            |
#                      [Application Setup]
#                            |
#                 [Command and Query Handlers]
#                 /         |                            \          \
#         [CommandHandler] [CommandHandler] [CallbackQueryHandler] [MessageHandler]
#           ("start", start) ("stop", stop)    (button_handler)     (answer_handler)
#                                 |                 |
#                          [start()]        [button_handler()]
#                             |                     |
#             [Display Training Options]  [Send Questions based on selection]
#                            /                      |          \
#              [send_question()]           [answer_handler()] [show_answer()]
#                              /                       |       \
#                [Select Question Type] [    Check Answer]  [Provide Correct Answer]
#                       /        \                \              /
#   [Translate Hieroglyph to Russian] [Translate Russian to Hieroglyph]
#                       /
#       [Translate Hieroglyph to Pinyin]
#
# [Google Sheets Setup]
#          |
#  [Authorization & Data Loading]
#         /           |              \
# [Load Hieroglyphs] [Load Pinyin] [Load Translations]
#
#   [Logging Setup]
#
#
